// Copyright (C) 2023  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/06/2023 10:32:11"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          painel_controle
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module painel_controle_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [2:0] ie1_func;
reg [2:0] ie1_user;
reg [2:0] ie2_func;
reg [2:0] ie2_user;
// wires                                               
wire [6:0] display;
wire [3:0] leds;
wire [6:0] matriz;

// assign statements (if any)                          
painel_controle i1 (
// port map - connection between master ports and signals/registers   
	.display(display),
	.ie1_func(ie1_func),
	.ie1_user(ie1_user),
	.ie2_func(ie2_func),
	.ie2_user(ie2_user),
	.leds(leds),
	.matriz(matriz)
);
initial 
begin 
#5000000 $finish;
end 
// ie1_user[ 2 ]
always
begin
	ie1_user[2] = 1'b0;
	ie1_user[2] = #4000 1'b1;
	#4000;
end 
// ie1_user[ 1 ]
always
begin
	ie1_user[1] = 1'b0;
	ie1_user[1] = #2000 1'b1;
	#2000;
end 
// ie1_user[ 0 ]
always
begin
	ie1_user[0] = 1'b0;
	ie1_user[0] = #1000 1'b1;
	#1000;
end 
// ie1_func[ 2 ]
initial
begin
	repeat(78)
	begin
		ie1_func[2] = 1'b0;
		ie1_func[2] = #32000 1'b1;
		# 32000;
	end
	ie1_func[2] = 1'b0;
end 
// ie1_func[ 1 ]
initial
begin
	repeat(156)
	begin
		ie1_func[1] = 1'b0;
		ie1_func[1] = #16000 1'b1;
		# 16000;
	end
	ie1_func[1] = 1'b0;
end 
// ie1_func[ 0 ]
initial
begin
	repeat(312)
	begin
		ie1_func[0] = 1'b0;
		ie1_func[0] = #8000 1'b1;
		# 8000;
	end
	ie1_func[0] = 1'b0;
end 
// ie2_user[ 2 ]
initial
begin
	repeat(9)
	begin
		ie2_user[2] = 1'b0;
		ie2_user[2] = #256000 1'b1;
		# 256000;
	end
	ie2_user[2] = 1'b0;
	ie2_user[2] = #256000 1'b1;
end 
// ie2_user[ 1 ]
initial
begin
	repeat(19)
	begin
		ie2_user[1] = 1'b0;
		ie2_user[1] = #128000 1'b1;
		# 128000;
	end
	ie2_user[1] = 1'b0;
	ie2_user[1] = #128000 1'b1;
end 
// ie2_user[ 0 ]
initial
begin
	repeat(39)
	begin
		ie2_user[0] = 1'b0;
		ie2_user[0] = #64000 1'b1;
		# 64000;
	end
	ie2_user[0] = 1'b0;
end 
// ie2_func[ 2 ]
initial
begin
	ie2_func[2] = 1'b0;
	ie2_func[2] = #2048000 1'b1;
	ie2_func[2] = #2048000 1'b0;
end 
// ie2_func[ 1 ]
initial
begin
	repeat(2)
	begin
		ie2_func[1] = 1'b0;
		ie2_func[1] = #1024000 1'b1;
		# 1024000;
	end
	ie2_func[1] = 1'b0;
end 
// ie2_func[ 0 ]
initial
begin
	repeat(4)
	begin
		ie2_func[0] = 1'b0;
		ie2_func[0] = #512000 1'b1;
		# 512000;
	end
	ie2_func[0] = 1'b0;
	ie2_func[0] = #512000 1'b1;
end 
endmodule

